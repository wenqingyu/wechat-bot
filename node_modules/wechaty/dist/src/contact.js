"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("./config");
const message_1 = require("./message");
const util_lib_1 = require("./util-lib");
const wechaty_1 = require("./wechaty");
const brolog_env_1 = require("./brolog-env");
var Gender;
(function (Gender) {
    Gender[Gender["Unknown"] = 0] = "Unknown";
    Gender[Gender["Male"] = 1] = "Male";
    Gender[Gender["Female"] = 2] = "Female";
})(Gender = exports.Gender || (exports.Gender = {}));
/**
 * Class Contact
 * blabla...
 * **IMPORTANT**
 *
 */
class Contact {
    constructor(id) {
        this.id = id;
        brolog_env_1.log.silly('Contact', `constructor(${id})`);
        if (typeof id !== 'string') {
            throw new Error('id must be string. found: ' + typeof id);
        }
    }
    toString() {
        if (!this.obj) {
            return this.id;
        }
        return this.obj.alias || this.obj.name || this.id;
    }
    toStringEx() { return `Contact(${this.obj && this.obj.name}[${this.id}])`; }
    parse(rawObj) {
        if (!rawObj || !rawObj.UserName) {
            brolog_env_1.log.warn('Contact', 'parse() got empty rawObj!');
        }
        return !rawObj ? null : {
            id: rawObj.UserName,
            uin: rawObj.Uin,
            weixin: rawObj.Alias,
            name: rawObj.NickName,
            alias: rawObj.RemarkName,
            sex: rawObj.Sex,
            province: rawObj.Province,
            city: rawObj.City,
            signature: rawObj.Signature,
            address: rawObj.Alias,
            star: !!rawObj.StarFriend,
            stranger: !!rawObj.stranger,
            avatar: rawObj.HeadImgUrl,
        };
    }
    weixin() { return this.obj && this.obj.weixin || ''; }
    name() { return util_lib_1.UtilLib.plainText(this.obj && this.obj.name || ''); }
    stranger() { return this.obj && this.obj.stranger; }
    star() { return this.obj && this.obj.star; }
    /**
     * Contact gender
     * @returns Gender.Male(2) | Gender.Female(1) | Gender.Unknown(0)
     */
    gender() { return this.obj ? this.obj.sex : Gender.Unknown; }
    province() { return this.obj && this.obj.province; }
    city() { return this.obj && this.obj.city; }
    /**
     * Get avatar picture file stream
     */
    avatar() {
        return __awaiter(this, void 0, void 0, function* () {
            brolog_env_1.log.verbose('Contact', 'avatar()');
            if (!this.obj || !this.obj.avatar) {
                throw new Error('Can not get avatar: not ready');
            }
            try {
                const hostname = config_1.Config.puppetInstance().browser.hostname;
                const avatarUrl = `http://${hostname}${this.obj.avatar}`;
                const cookies = yield config_1.Config.puppetInstance().browser.readCookie();
                brolog_env_1.log.silly('Contact', 'avatar() url: %s', avatarUrl);
                return util_lib_1.UtilLib.urlStream(avatarUrl, cookies);
            }
            catch (err) {
                brolog_env_1.log.warn('Contact', 'avatar() exception: %s', err.stack);
                throw err;
            }
        });
    }
    get(prop) { return this.obj && this.obj[prop]; }
    isReady() {
        return !!(this.obj && this.obj.id && this.obj.name !== undefined);
    }
    // public refresh() {
    //   log.warn('Contact', 'refresh() DEPRECATED. use reload() instead.')
    //   return this.reload()
    // }
    refresh() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.isReady()) {
                this.dirtyObj = this.obj;
            }
            this.obj = null;
            return this.ready();
        });
    }
    // public ready() {
    //   log.warn('Contact', 'ready() DEPRECATED. use load() instead.')
    //   return this.load()
    // }
    ready(contactGetter) {
        return __awaiter(this, void 0, void 0, function* () {
            brolog_env_1.log.silly('Contact', 'ready(' + (contactGetter ? typeof contactGetter : '') + ')');
            if (!this.id) {
                const e = new Error('ready() call on an un-inited contact');
                throw e;
            }
            if (this.isReady()) {
                return Promise.resolve(this);
            }
            if (!contactGetter) {
                brolog_env_1.log.silly('Contact', 'get contact via ' + config_1.Config.puppetInstance().constructor.name);
                contactGetter = config_1.Config.puppetInstance()
                    .getContact.bind(config_1.Config.puppetInstance());
            }
            if (!contactGetter) {
                throw new Error('no contatGetter');
            }
            try {
                const rawObj = yield contactGetter(this.id);
                brolog_env_1.log.silly('Contact', `contactGetter(${this.id}) resolved`);
                this.rawObj = rawObj;
                this.obj = this.parse(rawObj);
                return this;
            }
            catch (e) {
                brolog_env_1.log.error('Contact', `contactGetter(${this.id}) exception: %s`, e.message);
                throw e;
            }
        });
    }
    dumpRaw() {
        console.error('======= dump raw contact =======');
        Object.keys(this.rawObj).forEach(k => console.error(`${k}: ${this.rawObj[k]}`));
    }
    dump() {
        console.error('======= dump contact =======');
        Object.keys(this.obj).forEach(k => console.error(`${k}: ${this.obj && this.obj[k]}`));
    }
    self() {
        const userId = config_1.Config.puppetInstance()
            .userId;
        const selfId = this.id;
        if (!userId || !selfId) {
            throw new Error('no user or no self id');
        }
        return selfId === userId;
    }
    /**
     * find contact by `name` or `alias`
     */
    static findAll(queryArg) {
        return __awaiter(this, void 0, void 0, function* () {
            let query;
            if (queryArg) {
                if (queryArg.remark) {
                    brolog_env_1.log.warn('Contact', 'Contact.findAll({remark:%s}) DEPRECATED, use Contact.findAll({alias:%s}) instead.', queryArg.remark, queryArg.remark);
                    query = { alias: queryArg.remark };
                }
                else {
                    query = queryArg;
                }
            }
            else {
                query = { name: /.*/ };
            }
            // log.verbose('Cotnact', 'findAll({ name: %s })', query.name)
            brolog_env_1.log.verbose('Cotnact', 'findAll({ %s })', Object.keys(query)
                .map(k => `${k}: ${query[k]}`)
                .join(', '));
            if (Object.keys(query).length !== 1) {
                throw new Error('query only support one key. multi key support is not availble now.');
            }
            let filterKey = Object.keys(query)[0];
            let filterValue = query[filterKey];
            const keyMap = {
                name: 'NickName',
                alias: 'RemarkName',
            };
            filterKey = keyMap[filterKey];
            if (!filterKey) {
                throw new Error('unsupport filter key');
            }
            if (!filterValue) {
                throw new Error('filterValue not found');
            }
            /**
             * must be string because we need inject variable value
             * into code as variable name
             */
            let filterFunction;
            if (filterValue instanceof RegExp) {
                filterFunction = `(function (c) { return ${filterValue.toString()}.test(c.${filterKey}) })`;
            }
            else if (typeof filterValue === 'string') {
                filterValue = filterValue.replace(/'/g, '\\\'');
                filterFunction = `(function (c) { return c.${filterKey} === '${filterValue}' })`;
            }
            else {
                throw new Error('unsupport name type');
            }
            const list = yield config_1.Config.puppetInstance()
                .contactFind(filterFunction)
                .catch(e => {
                brolog_env_1.log.error('Contact', 'findAll() rejected: %s', e.message);
                return []; // fail safe
            });
            yield Promise.all(list.map(c => c.ready()));
            return list;
        });
    }
    alias(newAlias) {
        brolog_env_1.log.silly('Contact', 'alias(%s)', newAlias || '');
        if (newAlias === undefined) {
            return this.obj && this.obj.alias || null;
        }
        return config_1.Config.puppetInstance()
            .contactAlias(this, newAlias)
            .then(ret => {
            if (ret) {
                if (this.obj) {
                    this.obj.alias = newAlias;
                }
                else {
                    brolog_env_1.log.error('Contact', 'alias() without this.obj?');
                }
            }
            else {
                brolog_env_1.log.warn('Contact', 'alias(%s) fail', newAlias);
            }
            return ret;
        })
            .catch(e => {
            brolog_env_1.log.error('Contact', 'alias(%s) rejected: %s', newAlias, e.message);
            return false; // fail safe
        });
    }
    // function should be deprecated
    remark(newRemark) {
        brolog_env_1.log.warn('Contact', 'remark(%s) DEPRECATED, use alias(%s) instead.');
        brolog_env_1.log.silly('Contact', 'remark(%s)', newRemark || '');
        switch (newRemark) {
            case undefined:
                return this.alias();
            case null:
                return this.alias(null);
            default:
                return this.alias(newRemark);
        }
    }
    /**
     * try to find a contact by filter: {name: string | RegExp}
     */
    static find(query) {
        return __awaiter(this, void 0, void 0, function* () {
            brolog_env_1.log.verbose('Contact', 'find(%s)', JSON.stringify(query));
            const contactList = yield Contact.findAll(query);
            if (!contactList || !contactList.length) {
                throw new Error('find not found any contact');
            }
            if (contactList.length > 1) {
                brolog_env_1.log.warn('Contact', 'function find(%s) get %d contacts, use the first one by default', JSON.stringify(query), contactList.length);
            }
            return contactList[0];
        });
    }
    static load(id) {
        if (!id || typeof id !== 'string') {
            throw new Error('Contact.load(): id not found');
        }
        if (!(id in Contact.pool)) {
            Contact.pool[id] = new Contact(id);
        }
        return Contact.pool[id];
    }
    say(content) {
        return __awaiter(this, void 0, void 0, function* () {
            brolog_env_1.log.verbose('Contact', 'say(%s)', content);
            const wechaty = wechaty_1.Wechaty.instance();
            const user = wechaty.user();
            if (!user) {
                throw new Error('no user');
            }
            const m = new message_1.Message();
            m.from(user);
            m.to(this);
            m.content(content);
            brolog_env_1.log.silly('Contact', 'say() from: %s to: %s content: %s', user.name(), this.name(), content);
            yield wechaty.send(m);
            return;
        });
    }
}
Contact.pool = new Map();
exports.Contact = Contact;
// Contact.search = function(options) {
//   if (options.name) {
//     const regex = new RegExp(options.name)
//     return Object.keys(Contact.pool)
//     .filter(k => regex.test(Contact.pool[k].name()))
//     .map(k => Contact.pool[k])
//   }
//   return []
// }
//# sourceMappingURL=contact.js.map