/// <reference types="node" />
import { Sayable } from './config';
export declare type ContactRawObj = {
    Alias: string;
    City: string;
    NickName: string;
    Province: string;
    RemarkName: string;
    Sex: Gender;
    Signature: string;
    StarFriend: string;
    Uin: string;
    UserName: string;
    HeadImgUrl: string;
    stranger: string;
};
export declare enum Gender {
    Unknown = 0,
    Male = 1,
    Female = 2,
}
export declare type ContactQueryFilter = {
    name?: string | RegExp;
    alias?: string | RegExp;
    remark?: string | RegExp;
};
/**
 * Class Contact
 * blabla...
 * **IMPORTANT**
 *
 */
export declare class Contact implements Sayable {
    readonly id: string;
    private static pool;
    private obj;
    private dirtyObj;
    private rawObj;
    constructor(id: string);
    toString(): string;
    toStringEx(): string;
    private parse(rawObj);
    weixin(): string;
    name(): string;
    stranger(): boolean | null;
    star(): boolean | null;
    /**
     * Contact gender
     * @returns Gender.Male(2) | Gender.Female(1) | Gender.Unknown(0)
     */
    gender(): Gender;
    province(): string | null;
    city(): string | null;
    /**
     * Get avatar picture file stream
     */
    avatar(): Promise<NodeJS.ReadableStream>;
    get(prop: any): any;
    isReady(): boolean;
    refresh(): Promise<this>;
    ready(contactGetter?: (id: string) => Promise<ContactRawObj>): Promise<this>;
    dumpRaw(): void;
    dump(): void;
    self(): boolean;
    /**
     * find contact by `name` or `alias`
     */
    static findAll(queryArg?: ContactQueryFilter): Promise<Contact[]>;
    /**
     * get the alias for contact
     */
    alias(): string | null;
    /**
     * set the alias for contact
     * @return {Promise<boolean>} A promise to the result. true for success, false for failure
     */
    alias(newAlias: string): Promise<boolean>;
    /**
     * delete the alias for a contact
     */
    alias(empty: null): Promise<boolean>;
    remark(newRemark?: string | null): Promise<boolean> | string | null;
    /**
     * try to find a contact by filter: {name: string | RegExp}
     */
    static find(query: ContactQueryFilter): Promise<Contact>;
    static load(id: string): Contact;
    say(content: string): Promise<void>;
}
