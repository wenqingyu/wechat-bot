"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 * Wechaty: Wechat for Bot. and for human who talk to bot/robot
 *
 * Class Io
 * http://www.wechaty.io
 *
 * Licenst: ISC
 * https://github.com/zixia/wechaty
 *
 * Helper Class for Manage State Change
 */
const ava_1 = require("ava");
const state_monitor_1 = require("./state-monitor");
ava_1.default('StateMonitor target/current & stable', t => {
    const CLIENT_NAME = 'StateMonitorTest';
    const sm = new state_monitor_1.StateMonitor(CLIENT_NAME, 'A');
    t.is(sm.current(), 'A', 'current should be A');
    t.is(sm.target(), 'A', 'target should be A');
    t.true(sm.stable(), 'should be stable');
    t.throws(() => {
        sm.current('B');
    }, Error, 'should throw if current not match target');
    t.throws(() => {
        sm.current('B', false);
    }, Error, 'should throw if current not match target 2');
    t.is(sm.current(), 'A', 'current should still be A');
    t.is(sm.target(), 'A', 'target should still be A');
    t.true(sm.stable(), 'should be stable');
    sm.target('B');
    sm.current('B');
    t.is(sm.target(), 'B', 'target should still be B');
    t.is(sm.current(), 'B', 'current should be B');
    t.true(sm.stable(), 'should be stable');
    sm.target('A');
    sm.current('A', false);
    t.is(sm.target(), 'A', 'target should still be A');
    t.is(sm.current(), 'A', 'current should be A');
    t.false(sm.stable(), 'should not be stable');
});
ava_1.default('StateMonitor client & stable/inprocess', t => {
    const CLIENT_NAME = 'StateMonitorTest';
    const sm = new state_monitor_1.StateMonitor(CLIENT_NAME, 'A');
    t.is(sm.client(), CLIENT_NAME, 'should get the same client name as init');
    sm.target('B');
    sm.current('B');
    t.true(sm.stable(), 'should be stable');
    t.false(sm.inprocess(), 'should be not inprocess');
    sm.current('B', false);
    t.false(sm.stable(), 'should not be stable');
    t.true(sm.inprocess(), 'should be inprocess');
    sm.current('B', true);
    t.true(sm.stable(), 'should be stable');
    t.false(sm.inprocess(), 'should be not inprocess');
});
ava_1.default('current() strict check with target', t => {
    const CLIENT_NAME = 'StateMonitorTest';
    const sm = new state_monitor_1.StateMonitor(CLIENT_NAME, 'A');
    t.throws(() => {
        sm.current('B');
    }, Error, 'should thorw for unmatch current & target');
    sm.target('B');
    t.notThrows(() => sm.current('B'), 'should not throws for matched current & target');
});
//# sourceMappingURL=state-monitor.spec.js.map